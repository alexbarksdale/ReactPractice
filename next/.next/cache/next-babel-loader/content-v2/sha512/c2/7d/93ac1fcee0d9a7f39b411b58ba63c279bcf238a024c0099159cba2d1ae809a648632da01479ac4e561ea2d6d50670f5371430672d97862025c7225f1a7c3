{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/alex/dev/course/next/src/pages/[vehicle]/[person].tsx\",\n    _s = $RefreshSig$();\n\nimport { useRouter } from \"next/router\";\nexport default function Person(_ref) {\n  _s();\n\n  var ownersList = _ref.ownersList;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(ownersList, null, 4)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [query.person, \"'s \", query.vehicle]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Person, \"wby5GzzI23pLfTlf5I7v7XLG1RQ=\", false, function () {\n  return [useRouter];\n});\n\n_c = Person;\n\nPerson.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var query, response, ownersList;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = ctx.query;\n            _context.next = 3;\n            return fetch(\"http://localhost:4001/vehicles?ownerName=\".concat(query.person, \"&vehicle=\").concat(query.vehicle));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return response.json();\n\n          case 6:\n            ownersList = _context.sent;\n            return _context.abrupt(\"return\", {\n              ownersList: ownersList\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar _c;\n\n$RefreshReg$(_c, \"Person\");","map":{"version":3,"sources":["/Users/alex/dev/course/next/src/pages/[vehicle]/[person].tsx"],"names":["useRouter","Person","ownersList","query","JSON","stringify","person","vehicle","getInitialProps","ctx","fetch","response","json"],"mappings":";;;;;;;AACA,SAASA,SAAT,QAA0B,aAA1B;AAOA,eAAe,SAASC,MAAT,OAA6C;AAAA;;AAAA,MAA3BC,UAA2B,QAA3BA,UAA2B;;AAAA,mBACxCF,SAAS,EAD+B;AAAA,MAClDG,KADkD,cAClDA,KADkD;;AAG1D,sBACE;AAAA,4BACE;AAAA,gBAAMC,IAAI,CAACC,SAAL,CAAeH,UAAf,EAA2B,IAA3B,EAAiC,CAAjC;AAAN;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,iBACGC,KAAK,CAACG,MADT,SACoBH,KAAK,CAACI,OAD1B;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAXuBN,M;UACJD,S;;;KADIC,M;;AAoBxBA,MAAM,CAACO,eAAP;AAAA,uEAAyB,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACfN,YAAAA,KADe,GACLM,GADK,CACfN,KADe;AAAA;AAAA,mBAGAO,KAAK,oDACkBP,KAAK,CAACG,MADxB,sBAC0CH,KAAK,CAACI,OADhD,EAHL;;AAAA;AAGjBI,YAAAA,QAHiB;AAAA;AAAA,mBAMEA,QAAQ,CAACC,IAAT,EANF;;AAAA;AAMjBV,YAAAA,UANiB;AAAA,6CAQhB;AAAEA,cAAAA,UAAU,EAAEA;AAAd,aARgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { NextPageContext } from \"next\";\nimport { useRouter } from \"next/router\";\nimport { VehiclePerson } from \"../../../api/VehiclePerson\";\n\nexport interface PersonProps {\n  ownersList?: VehiclePerson[];\n}\n\nexport default function Person({ ownersList }: PersonProps) {\n  const { query } = useRouter();\n\n  return (\n    <div>\n      <pre>{JSON.stringify(ownersList, null, 4)}</pre>\n      <h1>\n        {query.person}'s {query.vehicle}\n      </h1>\n    </div>\n  );\n}\n\ninterface CustomPageContext extends NextPageContext {\n  query: {\n    person: string;\n    vehicle: string;\n  };\n}\n\nPerson.getInitialProps = async (ctx: CustomPageContext) => {\n  const { query } = ctx;\n\n  const response = await fetch(\n    `http://localhost:4001/vehicles?ownerName=${query.person}&vehicle=${query.vehicle}`\n  );\n  const ownersList = await response.json();\n\n  return { ownersList: ownersList };\n};\n"]},"metadata":{},"sourceType":"module"}